AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Stack with 3 EC2 instances running Docker and Docker Compose with Elastic IPs"

Parameters:
  InstanceName:
    Type: String
    Description: "Nombre base para las instancias EC2"
  
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "Nombre de la clave de acceso a las instancias"
    
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: "ID de la VPC en la cual se van a desplegar las instancias"

Resources:
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security Group allowing HTTP, HTTPS, SSH, Docker Swarm and application ports"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 3000
          ToPort: 3000
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 8000
          ToPort: 8000
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 8080
          ToPort: 8080
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 2377
          ToPort: 2377
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "udp"
          FromPort: 7946
          ToPort: 7946
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "udp"
          FromPort: 4789
          ToPort: 4789
          CidrIp: "0.0.0.0/0"

  ElasticIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EC2Instance1:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.medium"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      ImageId: "ami-0866a3c8686eaeeba"
      Tags:
        - Key: Name
          Value: !Sub "${InstanceName}-Instance1"
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            
            # Esperar a que Docker esté listo
            sleep 10
            
            # Iniciar Docker Swarm
            sudo docker swarm init > /tmp/swarm-init-output
            SWARM_JOIN_CMD=$(grep -o "docker swarm join --token .*" /tmp/swarm-init-output)
            SWARM_JOIN_CMD="sudo $SWARM_JOIN_CMD"

            echo $SWARM_JOIN_CMD > /tmp/swarm-join-cmd.sh
            
            # Iniciar un servidor HTTP simple en el puerto 8000 para compartir el comando
            sudo apt install -y python3
            cd /tmp
            python3 -m http.server 8000 &

            # Desplegar el stack Docker después de que el Swarm esté configurado
            sleep 80
            cd ~
            git clone https://github.com/Miguel-Alberto-V/FRONT_ESCALABLE_REACT-NGINX.git archivo
            cd archivo
            sudo docker stack deploy -c docker-compose.yml my_stack

    DependsOn: ElasticIP1

  EIPAssociation1:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EC2Instance1
      EIP: !Ref ElasticIP1

  EC2Instance2:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.medium"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      ImageId: "ami-0866a3c8686eaeeba"
      Tags:
        - Key: Name
          Value: !Sub "${InstanceName}-Instance2"
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            
            # Esperar a que Docker esté listo y descargar el comando de unión
            sleep 25
            sudo apt install -y python3
            
            cd /tmp
            MANAGER_IP="http://${ElasticIP1}:8000/swarm-join-cmd.sh"
            curl -O $MANAGER_IP
            chmod +x swarm-join-cmd.sh
            ./swarm-join-cmd.sh
            python3 -m http.server 8000 &


  EC2Instance3:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.medium"
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      ImageId: "ami-0866a3c8686eaeeba"
      Tags:
        - Key: Name
          Value: !Sub "${InstanceName}-Instance3"
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            
            # Esperar a que Docker esté listo y descargar el comando de unión
            sleep 25
            sudo apt install -y python3
            
            cd /tmp
            MANAGER_IP="http://${ElasticIP1}:8000/swarm-join-cmd.sh"
            curl -O $MANAGER_IP
            chmod +x swarm-join-cmd.sh
            ./swarm-join-cmd.sh
            python3 -m http.server 8000 &

Outputs:
  InstanceIds:
    Description: "IDs of the created EC2 instances"
    Value: !Join [", ", [!Ref EC2Instance1, !Ref EC2Instance2, !Ref EC2Instance3]]
  SecurityGroupId:
    Description: "Security Group ID used for the instances"
    Value: !Ref WebServerSecurityGroup
  ElasticIP1:
    Description: "Elastic IP of EC2Instance1"
    Value: !Ref ElasticIP1
