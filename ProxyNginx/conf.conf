user nginx;
worker_processes 1;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # Configuración de caché para recursos estáticos
    proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=STATIC:30m inactive=24h max_size=200m use_temp_path=off;

    # Configura headers comunes para el proxy
    proxy_pass_request_headers on;
    proxy_redirect off;
    proxy_set_header Host $host;
    proxy_set_header Connection keep-alive;

    proxy_connect_timeout 60s;   # Tiempo máximo para establecer una conexión con el backend
    proxy_send_timeout 60s;      # Tiempo máximo para enviar datos al cliente
    proxy_read_timeout 60s;      # Tiempo máximo para recibir datos del backend
    send_timeout 60s;            # Tiempo máximo para que NGINX envíe datos al cliente

    gzip on;
    gzip_proxied any;

    add_header X-Host $hostname;
    add_header X-Cache-Status $upstream_cache_status;

    # Define el grupo upstream para balanceo de carga
    upstream react_app_cluster {
        server react_app:3000;  # Aquí, 'react_app' es el nombre del servicio en Docker Swarm
    }

    server {
        listen 80;
          # Cambia 'yourdomain.com' a tu dominio real

        # Configura expiraciones de caché por tipo de archivo
        location ~* \.(html)$ {
            expires 1h;
            add_header Cache-Control "public";
            proxy_pass http://react_app_cluster;
        }

        location ~* \.(css|js)$ {
            expires 1M;
            add_header Cache-Control "public";
            proxy_pass http://react_app_cluster;
        }

        location ~* \.(png|jpg|jpeg|gif|ico|svg)$ {
            expires 6M;
            add_header Cache-Control "public";
            proxy_pass http://react_app_cluster;
        }

        location / {
            proxy_pass http://react_app_cluster;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
}
